package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.daizhihua.core.config.ResponseData;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.List;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.HttpStatus;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

/**
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
private final Logger logger=LoggerFactory.getLogger(${table.controllerName}.class);

    @Resource
    private ${table.serviceName} ${entity}Service;

    /**
     * 分页查询数据
     *
     * @param page
     * @param pageSize
     * @param ${table.entityPath}
     * @param ${table.entityPath} 查询条件
     * @return
     */
    @ApiOperation(value = "分页获取所有${table.entityPath}信息", notes = "获取所有${table.entityPath}信息")
    @ApiImplicitParams({
            @ApiImplicitParam(
                    name = "page",
                    value = "当前页码(page)",
                    example = "1",
                    dataType = "int",
                    required = true),
            @ApiImplicitParam(
                    name = "pageSize",
                    value = "每页展示条数(pageSize)",
                    example = "10",
                    dataType = "int",
                    required = true)
    })
    @PostMapping("/selectByPage")
    public ResponseData get${entity}List(@RequestParam("page") Integer page,
    @RequestParam("pageSize") Integer pageSize,${entity} ${table.entityPath}){
        QueryWrapper<${entity}> query=new QueryWrapper<>(${table.entityPath});
        try{
            IPage<${entity}> pageList= ${entity}Service.page(new Page<>(page,pageSize),query);
            return new ResponseData<>(pageList);
        }catch(Exception e){
            logger.error("get${entity}List -=- {}",e.toString());
            return new ResponseData(HttpStatus.FAILED_DEPENDENCY.value(),"系统异常");
        }
    }

    /**
     * 保存和修改公用的
     * @param ${table.entityPath} 传递的实体
     * @return 0 失败  1 成功
     */
    @ApiOperation(value = "${table.entityPath}新增/修改", notes = "${table.entityPath}新增/修改")
    @PostMapping("/addorupd")
    public ResponseData addorupd(@RequestBody ${entity} ${table.entityPath}){
        ResponseData responseData=new ResponseData();
        try{
            boolean saveOrUpdate= ${entity}Service.saveOrUpdate(${table.entityPath});
            return new ResponseData<>(saveOrUpdate);
        }catch(Exception e){
            logger.error("${table.entityPath}Save -=- {}",e.toString());
            return new ResponseData(HttpStatus.FAILED_DEPENDENCY.value(),"系统异常");
        }
    }

    /**
     * 根据${table.entityPath}id删除${entity}
     * @param  ${table.entityPath}Id
     * @return false 失败  true 成功
     */
    @ApiOperation(value = "${table.entityPath}删除", notes = "${table.entityPath}删除")
    @ApiImplicitParams({
            @ApiImplicitParam(
                    name = "${table.entityPath}Id",
                    value = "删除${entity}操作",
                    example = "",
                    dataType = "String",
                    required = true)
    })
    @DeleteMapping("/delete")
    public ResponseData delete(@RequestParam("${table.entityPath}Id") String ${table.entityPath}Id){
        ${entity} ${table.entityPath} = ${entity}Service.getById(${table.entityPath}Id);
        try{
            boolean saveOrUpdate= ${entity}Service.saveOrUpdate(${table.entityPath});
            return new ResponseData(saveOrUpdate);
        }catch(Exception e){
            logger.error("${table.entityPath}Delete -=- {}",e.toString());
            return new ResponseData(HttpStatus.FAILED_DEPENDENCY.value(),"系统异常");
        }
    }

    /**
     * 批量删除${entity}
     * @param ${table.entityPath}Ids
     * @return false 失败  true 成功
     */
    @ApiOperation(value = "${table.entityPath}批量删除", notes = "${table.entityPath}批量删除")
    @ApiImplicitParams({
            @ApiImplicitParam(
                    name = "${table.entityPath}Ids",
                    value = "删除${entity}操作",
                    example = "",
                    dataType = "List",
                    required = true)
    })
    @DeleteMapping("/${table.entityPath}BatchDelete")
    public ResponseData deleteBatchIds(@RequestParam("${table.entityPath}Ids") List<String> ${table.entityPath}Ids){
        try{
            boolean result= ${entity}Service.removeByIds(${table.entityPath}Ids);
            return new ResponseData(result);
        }catch(Exception e){
            logger.error("${table.entityPath}BatchDelete -=- {}",e.toString());
            return new ResponseData(HttpStatus.FAILED_DEPENDENCY.value(),"系统异常");
        }
    }

}
